/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers.
 */
body {
  margin: 0; }

/**
 * Render the `main` element consistently in IE.
 */
main {
  display: block; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * Remove the gray background on active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * 1. Remove the bottom border in Chrome 57-
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */ }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10.
 */
img {
  border-style: none; }

/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers.
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * Correct the inability to style clickable types in iOS and Safari.
 */
button,
[type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button; }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline; }

/**
 * Remove the default vertical scrollbar in IE 10+.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10.
 * 2. Remove the padding in IE 10.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE 10+, and Firefox.
 */
details {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/* Misc
   ========================================================================== */
/**
 * Add the correct display in IE 10+.
 */
template {
  display: none; }

/**
 * Add the correct display in IE 10.
 */
[hidden] {
  display: none; }

/* GLOBAL STYLING */
html {
  box-sizing: border-box; }

*, *::after, *::before {
  box-sizing: inherit; }

/* FONT FACE */
@font-face {
  font-family: 'Gelion';
  src: url("../assets/fonts/Gelion-Medium.eot");
  src: url("../assets/fonts/Gelion-Medium.eot?#iefix") format("embedded-opentype"), url("../assets/fonts/Gelion-Medium.woff2") format("woff2"), url("../assets/fonts/Gelion-Medium.woff") format("woff"), url("../assets/fonts/Gelion-Medium.ttf") format("truetype"), url("../assets/fonts/Gelion-Medium.svg#Gelion-Medium") format("svg");
  font-weight: 500;
  font-style: normal; }

@font-face {
  font-family: 'Telegraf';
  src: url("../assets/fonts/Telegraf-Regular.eot");
  src: url("../assets/fonts/Telegraf-Regular.eot?#iefix") format("embedded-opentype"), url("../assets/fonts/Telegraf-Regular.woff2") format("woff2"), url("../assets/fonts/Telegraf-Regular.woff") format("woff"), url("../assets/fonts/Telegraf-Regular.ttf") format("truetype"), url("../assets/fonts/Telegraf-Regular.svg#Telegraf-Regular") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'Object Sans';
  src: url("../assets/fonts/ObjectSans-Regular.eot");
  src: url("../assets/fonts/ObjectSans-Regular.eot?#iefix") format("embedded-opentype"), url("../assets/fonts/ObjectSans-Regular.woff2") format("woff2"), url("../assets/fonts/ObjectSans-Regular.woff") format("woff"), url("../assets/fonts/ObjectSans-Regular.ttf") format("truetype"), url("../assets/fonts/ObjectSans-Regular.svg#ObjectSans-Regular") format("svg");
  font-weight: normal;
  font-style: normal; }

/* BODY */
body {
  background: black;
  color: white;
  font: normal 13px 'Object Sans';
  position: relative;
  overflow-x: hidden;
  overflow-y: hidden; }
  body .container {
    width: 100%;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    position: relative;
    text-align: center;
    padding: 60px 20px 20px; }
    @media (max-width: 640px) {
      body .container {
        padding-top: 80px; } }
  body.hidden::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100vw;
    height: 100vh;
    z-index: 100;
    background: black; }

canvas {
  position: absolute;
  /* padding: 70px; */
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: -1;
  width: 100vw;
  height: 100vh; }

/* HEADINGS */
h1 {
  font: 500 36px 'Gelion';
  margin: 0;
  line-height: 75%; }
  h1 .mask {
    padding-bottom: 1%; }
    @media (max-width: 640px) {
      h1 .mask {
        padding-bottom: 0.6vw; } }

h3 {
  font: 500 30px 'Gelion';
  margin: 0; }

p {
  margin: 20px 0 0;
  line-height: 1.4;
  letter-spacing: 0.02em; }
  p.main-desc {
    max-width: 400px; }
    p.main-desc span {
      display: inline-block;
      opacity: 0;
      transform: translateY(20px); }
    p.main-desc.mobile {
      display: none;
      max-width: 280px; }
    @media (max-width: 640px) {
      p.main-desc {
        display: none; }
        p.main-desc.mobile {
          display: inline-block; } }

a {
  color: white;
  text-decoration: none;
  display: inline-block; }
  a.btn {
    position: relative; }
    a.btn > .subtext {
      font: 500 18px 'Gelion';
      padding: 8px 30px 14px;
      border: 1px solid white;
      display: inline-block;
      transition: 0.4s ease color, 0.4s ease background-color; }
    a.btn:hover > .subtext, a.btn:focus > .subtext {
      background-color: white;
      color: black; }
    a.btn .backdrop {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      width: 100%;
      height: 100%;
      transform-origin: 50% 100%;
      background: white; }
    a.btn.hidden {
      cursor: auto; }
      a.btn.hidden > .subtext {
        opacity: 0; }
  a.icon {
    width: 30px;
    height: 30px;
    opacity: 0.5;
    transition: 0.4s ease opacity; }
    a.icon:hover, a.icon:focus {
      opacity: 1; }

img {
  width: 100%;
  height: auto;
  display: inline-block; }

span.separator {
  display: inline-block;
  margin: 30px 0;
  width: 50px;
  height: 1px;
  background: white;
  transform-origin: 50%;
  transform: scaleX(0); }

.mask {
  overflow: hidden; }
  .mask, .mask > .content {
    display: inline-block; }

/* FOOTER */
footer {
  position: fixed;
  bottom: 0;
  left: 0;
  padding: 48px;
  width: 100%;
  display: flex;
  align-items: flex-end; }
  footer ul.social {
    display: flex;
    list-style: none;
    margin: 0 0 -5px 30px;
    padding: 0; }
    footer ul.social li {
      margin-left: 20px;
      padding: 0; }
  @media (max-width: 640px) {
    footer {
      padding: 15px;
      bottom: auto;
      top: 0;
      justify-content: space-between;
      align-items: center; }
      footer h1 {
        font-size: 8vw; }
      footer ul.social {
        margin: 0; } }
/*# sourceMappingURL=data:application/json;base64, */